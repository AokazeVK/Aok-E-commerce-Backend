generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model carrito {
  id         Int            @id @default(autoincrement())
  usuario_id Int?           @unique
  usuario    usuarios?      @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  items      carrito_item[]
  total      Decimal?       @default(0.00) @db.Decimal(10, 2) // Total del carrito
}

model carrito_item {
  id          Int       @id @default(autoincrement())
  carrito_id  Int
  producto_id Int
  cantidad    Int
  carrito     carrito   @relation(fields: [carrito_id], references: [id], onDelete: Cascade)
  producto    productos @relation(fields: [producto_id], references: [id], onDelete: Cascade)

  @@unique([carrito_id, producto_id]) // Evita duplicados en el carrito
}

model categorias {
  id          Int         @id @default(autoincrement())
  nombre      String      @unique @db.VarChar(100)
  descripcion String?
  activo      Boolean     @default(true)
  productos   productos[]
  cupones     cupones[]

  // Relación para subcategorías
  categoria_padre_id Int?
  categoria_padre    categorias?  @relation("CategoriaPadre", fields: [categoria_padre_id], references: [id])
  subcategorias      categorias[] @relation("CategoriaPadre")

  @@index([categoria_padre_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
enum TipoDescuento {
  PORCENTAJE
  MONTO
}

model cupones {
  id               Int      @id @default(autoincrement())
  codigo           String   @unique @db.VarChar(50)
  tipo_descuento   String   @default("porcentaje") // "porcentaje" o "monto"
  descuento        Decimal  @db.Decimal(5, 2) // Puede ser % o monto fijo
  fecha_expiracion DateTime @db.Timestamp(6)
  activo           Boolean  @default(true) // Para desactivar cupones sin eliminarlos
  limite_uso       Int? // Número máximo de veces que se puede usar
  usos_realizados  Int      @default(0) // Veces que ha sido utilizado
  minimo_compra    Decimal? @db.Decimal(10, 2) // Monto mínimo de compra para aplicar el cupón

  // Opciones de restricción
  producto_id Int?
  producto    productos? @relation(fields: [producto_id], references: [id], onDelete: SetNull) // Solo aplica a un producto específico

  categoria_id Int?
  categoria    categorias? @relation(fields: [categoria_id], references: [id], onDelete: SetNull) // Aplica a una categoría específica

  usuario_id Int?
  usuario    usuarios? @relation(fields: [usuario_id], references: [id], onDelete: SetNull) // Si es un cupón exclusivo para un usuario

  ordenes ordenes[] // Relación con órdenes donde se ha aplicado
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model detalles_orden {
  id              Int        @id @default(autoincrement())
  orden_id        Int?
  producto_id     Int?
  cantidad        Int
  precio_unitario Decimal    @db.Decimal(10, 2)
  ordenes         ordenes?   @relation(fields: [orden_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productos       productos? @relation(fields: [producto_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model direcciones_envio {
  id             Int       @id @default(autoincrement())
  usuario_id     Int?
  direccion      String
  ciudad         String    @db.VarChar(100)
  codigo_postal  String    @db.VarChar(20)
  pais           String    @db.VarChar(100)
  predeterminada Boolean?  @default(false)
  usuarios       usuarios? @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ordenes        ordenes[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model historial_orden {
  id           Int       @id @default(autoincrement())
  orden_id     Int?
  estado       String    @db.VarChar(50)
  fecha_cambio DateTime? @default(now()) @db.Timestamp(6)
  ordenes      ordenes?  @relation(fields: [orden_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model imagenes_producto {
  id          Int     @id @default(autoincrement())
  producto_id Int
  url_imagen  String
  tipo        String? @default("secundaria") @db.VarChar(50) // "principal" o "secundaria"
  orden       Int?    @default(0)

  productos productos @relation(fields: [producto_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ordenes {
  id                 Int                @id @default(autoincrement())
  usuario_id         Int?
  direccion_envio_id Int?
  fecha_orden        DateTime?          @default(now()) @db.Timestamp(6)
  estado             String             @default("pendiente") @db.VarChar(50)
  total              Decimal            @db.Decimal(10, 2)
  cupon_id           Int?
  detalles_orden     detalles_orden[]
  historial_orden    historial_orden[]
  cupones            cupones?           @relation(fields: [cupon_id], references: [id], onUpdate: NoAction)
  direcciones_envio  direcciones_envio? @relation(fields: [direccion_envio_id], references: [id], onUpdate: NoAction)
  usuarios           usuarios?          @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pagos              pagos[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pagos {
  id             Int       @id @default(autoincrement())
  orden_id       Int?
  monto          Decimal   @db.Decimal(10, 2)
  fecha_pago     DateTime? @default(now()) @db.Timestamp(6)
  metodo_pago    String    @db.VarChar(50)
  transaccion_id String?   @unique @db.VarChar(255)
  estado_pago    String    @default("pendiente") @db.VarChar(50)
  ordenes        ordenes?  @relation(fields: [orden_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model productos {
  id                Int                 @id @default(autoincrement())
  nombre            String              @db.VarChar(255)
  descripcion       String?
  precio            Decimal             @db.Decimal(10, 2)
  stock             Int
  estado_stock      String?             @default("disponible") @db.VarChar(50)
  categoria_id      Int?
  fecha_creacion    DateTime?           @default(now()) @db.Timestamp(6)
  carrito_items     carrito_item[]
  detalles_orden    detalles_orden[]
  imagenes_producto imagenes_producto[]
  categorias        categorias?         @relation(fields: [categoria_id], references: [id], onUpdate: NoAction)
  resenas           resenas[]
  cupones           cupones[] // Relación con cupones

  // Nuevos atributos
  marca            String?  @db.VarChar(100)
  especificaciones String?
  color            String?  @db.VarChar(50)
  peso             String?  @db.VarChar(50)
  dimensiones      String?
  nuevo            Boolean? @default(true)
  activo           Boolean  @default(true) // Nuevo campo para activar/desactivar productos
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model resenas {
  id           Int        @id @default(autoincrement())
  usuario_id   Int?
  producto_id  Int?
  calificacion Int
  comentario   String?
  fecha_resena DateTime?  @default(now()) @db.Timestamp(6)
  productos    productos? @relation(fields: [producto_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuarios     usuarios?  @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model usuarios {
  id                                  Int                 @id @default(autoincrement())
  nombre                              String              @db.VarChar(100)
  apellido                            String?             @db.VarChar(100)
  correo                              String              @unique @db.VarChar(255)
  password                            String
  telefono                            String?             @db.VarChar(20)
  rol                                 String              @default("cliente") @db.VarChar(50)
  fecha_registro                      DateTime?           @default(now()) @db.Timestamp(6)
  verificado                          Boolean             @default(false) // Nuevo campo para saber si el correo fue verificado
  token_verificacion                  String?             @unique // Token para verificar el correo (opcional, pero útil)
  token_recuperacion                  String?
  fecha_expiracion_token_recuperacion DateTime?           @db.Timestamp(6)
  customer_id                         String?             @unique // Guardamos el ID de cliente de Stripe
  tarjetas                            tarjetas[]
  carrito                             carrito?
  direcciones_envio                   direcciones_envio[]
  ordenes                             ordenes[]
  resenas                             resenas[]
  cupones                             cupones[]
}

model tarjetas {
  id              Int      @id @default(autoincrement())
  usuario_id      Int      @unique
  stripe_pm_id    String   @unique // ID del Payment Method en Stripe
  ultimos_digitos String   @db.VarChar(4)
  marca           String   @db.VarChar(50)
  fecha_exp       String   @db.VarChar(7) // MM/YYYY
  usuario         usuarios @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

}
